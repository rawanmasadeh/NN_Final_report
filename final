import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D, BatchNormalization
from tensorflow.keras.applications import EfficientNetB0  # Replacing ResNet50 with EfficientNetB0
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from tensorflow.keras.optimizers import Adam
import numpy as np
import pandas as pd
import cv2
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import albumentations as A  # For image augmentation
from tensorflow.keras.applications.efficientnet import preprocess_input  # Import EfficientNet preprocessing function

# Hyperparameters
img_size = (224, 224)
batch_size = 32
epochs = 50
learning_rate = 0.001

train_data_dir = r'C:\Users\rawan\OneDrive\Documents\final report\trainLabels.csv'
test_data_dir = r'C:\Users\rawan\OneDrive\Documents\final report\test'

def load_data(data_dir):
    images = []
    labels = []
    for filename, label in pd.read_csv(f'{data_dir}/trainLabels.csv').values:
        img_path = f'{data_dir}/{filename}'
        img = cv2.imread(img_path)
        if img is not None:
            images.append(img)
            labels.append(label)
        else:
            print(f"Warning: Image {img_path} not found.")
            
    X = np.array([cv2.resize(img, img_size) for img in images])
    X = preprocess_input(X)  # Preprocessing for EfficientNetB0
    y = np.array(labels)

    return X, y

X, y = load_data(train_data_dir)
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Data augmentation
train_transform = A.Compose([
    A.Resize(img_size[0], img_size[1]),
    A.HorizontalFlip(p=0.5),
    A.VerticalFlip(p=0.5),
    A.RandomCrop(width=img_size[0], height=img_size[1], p=0.5),
    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))  # Normalize
])

train_datagen = ImageDataGenerator(
    preprocessing_function=lambda x: train_transform(image=x)['image']
)

train_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)

# model
base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(img_size[0], img_size[1], 3))
base_model.trainable = False

model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(1024, activation='relu', kernel_initializer='he_normal'),
    BatchNormalization(),
    Dropout(0.5),
    Dense(512, activation='relu', kernel_initializer='he_normal'),
    BatchNormalization(),
    Dropout(0.3),
    Dense(5, activation='softmax')
])


optimizer = Adam(learning_rate=learning_rate)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train
callbacks = [
    EarlyStopping(patience=5, restore_best_weights=True),
    ReduceLROnPlateau(factor=0.1, patience=3),
    ModelCheckpoint('best_model.h5', save_best_only=True)
]

history = model.fit(train_generator,
                    steps_per_epoch=len(X_train) // batch_size,
                    epochs=epochs,
                    validation_data=(X_val, y_val),
                    callbacks=callbacks)

# Evaluate
test_loss, test_acc = model.evaluate(X_val, y_val)
print('Test accuracy:', test_acc)

y_pred = model.predict(X_val)
y_pred_classes = np.argmax(y_pred, axis=1)

print(classification_report(y_val, y_pred_classes))

print(confusion_matrix(y_val, y_pred_classes))

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Model Accuracy')
plt.savefig('accuracy.png') 
plt.show()


cm = confusion_matrix(y_val, y_pred_classes)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.savefig('confusion_matrix.png') 
plt.show()

# Visualiz sample predictions
def visualize_predictions(images, true_labels, predicted_labels):
    plt.figure(figsize=(15, 5))
    for i in range(10):
        plt.subplot(2, 5, i + 1)
        plt.imshow(images[i])
        plt.title(f"True: {true_labels[i]}, Pred: {predicted_labels[i]}")
        plt.axis('off')
    plt.show()

# Example
visualize_predictions(X_val[:5], y_val[:10], y_pred_classes[:5])
